{
  "search.exclude": {
    "pnpm-lock.yaml": true,
    "package-lock.json": true,
    "yarn.lock": true,
  },
  "npm.packageManager": "pnpm",
  // * Explorer
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, pnpm-workspace.yaml, tsconfig*.json, .npmrc, .nvmrc, .pnpmfile.*js",
    "README.md": "CODE_OF_CONDUCT.md, CHANGELOG.md, SECURITY.md, CONTRIBUTING.md, LICENSE",
    "go.mod": "go.sum, go.work",
  },
  // * Git
  "git.autorefresh": true,
  "git.autofetch": true,
  "git.fetchOnPull": true,
  "git.pruneOnFetch": true,
  "git.pullBeforeCheckout": true,
  "git.branchProtection": [
    "main"
  ],
  "git.mergeEditor": true,
  "git.enableSmartCommit": true,
  "git.replaceTagsWhenPull": true,
  // * GitHub
  "github.branchProtection": true,
  "githubPullRequests.showPullRequestNumberInTree": true,
  // * Files
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true,
  "files.associations": {
    "CODEOWNERS": "ignore",
    "**/.github/workflows/*.y*ml": "yaml",
    "*.env*": "properties",
    ".lycheeignore": "ignore",
    "tsconfig.json": "jsonc",
    "*.tsconfig.json": "jsonc",
    "tsconfig.*.json": "jsonc",
    "project.json": "jsonc",
    "*.tsbuildinfo": "jsonc"
  },
  // * Editor
  "editor.inlineSuggest.enabled": true,
  "editor.detectIndentation": true,
  "editor.formatOnSave": true,
  // * Markdown
  "[markdown]": {
    "editor.defaultFormatter": "DavidAnson.vscode-markdownlint",
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true
  },
  "markdownlint.configFile": "./.github/linters/.markdownlint.yml",
  "markdown.extension.toc.levels": "2..6",
  "markdown.extension.toc.updateOnSave": true,
  "markdown.extension.tableFormatter.normalizeIndentation": true,
  "markdown.extension.tableFormatter.delimiterRowNoPadding": true,
  "markdown.extension.toc.slugifyMode": "github",
  "markdown.extension.toc.unorderedList.marker": "-",
  "markdown.extension.orderedList.marker": "one",
  "markdown.extension.print.absoluteImgPath": true,
  // *YAML
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml"
  },
  "yaml.format.singleQuote": false,
  "yaml.schemaStore.enable": true,
  // * JSON
  "[json][jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "json.schemas": [
    {
      "fileMatch": [
        "devcontainer.json"
      ],
      "url": "https://raw.githubusercontent.com/devcontainers/spec/main/schemas/devContainer.schema.json"
    }
  ],
  // * JavaScript / TypeScript
  "[javascript][javascriptreact][typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "eslint.format.enable": true,
  // * Go
  "[go][go.mod]": {
    "editor.defaultFormatter": "golang.go",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always"
    }
  },
  "go.useLanguageServer": true,
  "go.toolsManagement.autoUpdate": true,
  "go.vetOnSave": "package",
  "go.diagnostic.vulncheck": "Imports",
  "go.testTimeout": "5m",
  "go.lintTool": "golangci-lint",
  "go.lintFlags": [
    "--fast-only"
  ],
  "go.alternateTools": {
    "customFormatter": "golangci-lint"
  },
  "go.formatTool": "custom",
  "go.formatFlags": [
    "fmt",
    "--stdin",
  ],
  "gopls": {
    "formatting.gofumpt": true,
    "ui.semanticTokens": true,
    "ui.completion.usePlaceholders": true
  },
  // * Lint
  "cSpell.import": [
    "./.github/linters/.cspell.yml"
  ],
  "prettier.configPath": "./.github/linters/.prettierrc.yml",
  "linter.linters": {
    "yamllint": {
      "configFiles": [
        "./.github/linters/.yamllint.yml"
      ]
    },
    "markdownlint": {
      "configFiles": [
        "./.github/linters/.markdownlint.yml"
      ]
    },
    "shellcheck": {
      "configFiles": [
        "./.github/linters/.shellcheckrc"
      ],
      "command": [
        "shellcheck",
        "--format",
        "json",
        "--enable",
        "all",
        "--rcfile",
        "$config",
        "-"
      ]
    }
  },
  "shellcheck.customArgs": [
    "--rcfile",
    "./.github/linters/.shellcheckrc"
  ],
  "shellcheck.useWorkspaceRootAsCwd": true,
  // * CoPilot / AI
  "chat.mcp.discovery.enabled": true,
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": "Use the Conventional Commits specification to create commit message with scope to keep consistent commit history. Do not use file extension. Must be less than 100 characters."
    }
  ],
  // * Misc
  "dotenv.enableAutocloaking": false,
  "sarif-viewer.connectToGithubCodeScanning": "on"
}
